// Divsense Calculator Producer

export divideBy, sub, summa, prod, sinus, cosinus,
       logarithm, radic, percent, trans, asNumber

import 'math'
import 'number'

toPrecision = invoker(1, 'toPrecision')

pvalue = map(prop('value'))
ptype = map(prop('type'))
textToNumber = toNumber . prop('text')

validInputs = all(equals('number')) . ptype

typeErrors = objOf('errors')
            . map(x -> {nid: prop('nid', x), type: 'node-pop-up', message: 'input must a number'})
            . filter(not . equals('number') . prop('type'))

result = value -> ({product:{value, type:'number'}})

outp = f -> ifElse(validInputs, (result . f . pvalue), typeErrors) . prop('inputs')

onearg = f -> outp( toPrecision(4) . f . head . prop('inputs') )

cumulative = f -> x -> {
    xs = pvalue(x)

    return result(reduce(f, head(xs), tail(xs)))
}

divideBy = cumulative( divide )
sub = cumulative( subtract )

// summa :: [{value::Number, type::String}] -> Number
summa = outp( sum )

// prod :: [{value::Number}] -> Number
prod = outp( product )

// simus :: [{value::Number}] -> Number
sinus = onearg(sin)
cosinus = onearg(cos)
logarithm = onearg(log)
radic = onearg(sqrt)

// percent :: [{value::Number}] -> Number
percent = ({inputs}) -> {
    data = pvalue(inputs)
    a = nth(0, data)
    b = nth(1, data)

    return result( a/b * 100 )
}

trans = assoc('type', 'number') . head . prop('inputs')

asNumber = result . textToNumber . prop('node')

